'use strict'

var uuid = require('node-uuid')
  , BulkStream = require('bulk-stream')
  , isstream = require('isstream')


function multipart (req, options) {
  var chunked = isChunked(options)
    , boundary = getBoundary(options)

  setHeaders(options, chunked, boundary)
  var input = build(options, chunked, boundary)
  options.body = input
}

function isChunked (options) {
  if (options.headers['transfer-encoding'] === 'chunked') {
    return true
  }

  return (options.multipart||[]).some(function (part) {
    return isstream(part.body)
  })
}

function getBoundary (options) {
  var header = options.headers['content-type']
    , boundary = uuid()

  if (header && header.indexOf('boundary') !== -1) {
    boundary = header.replace(/.*boundary=([^\s;]+).*/, '$1')
  }

  return boundary
}

function setHeaders (options, chunked, boundary) {
  if (chunked) {
    options.headers['transfer-encoding'] = 'chunked'
  }

  var header = options.headers['content-type']

  if (!header || header.indexOf('multipart') === -1) {
    options.headers['content-type'] = 'multipart/related; boundary=' + boundary
  }
  else {
    options.headers['content-type'] = header + '; boundary=' + boundary
  }
}

function build (options, chunked, boundary) {
  var body = chunked ? new BulkStream(body) : []

  function add (part) {
    return chunked ? body.append(part) : body.push(new Buffer(part))
  }

  // if (options.preambleCRLF) {
  //   add('\r\n')
  // }

  options.multipart.forEach(function (part) {
    var preamble = '--' + boundary + '\r\n'

    var headers = ''
    Object.keys(part).forEach(function (key) {
      if (key !== 'body') {
        headers += key + ': ' + part[key] + '\r\n'
      }
    })

    add(preamble + headers + '\r\n')
    add(part.body)
    add('\r\n')
  })
  add('--' + boundary + '--')

  // if (options.postambleCRLF) {
  //   add('\r\n')
  // }

  return body
}

module.exports = multipart
